#!/bin/bash
# Starts the Ethereum testnet chain in the background

set -ex
TEST_TYPE=$1
ALCHEMY_ID=$2
# GETH and TEST_TYPE may be unbound, don't `set -u`

# Starts a hardhat RPC backend that is based off of a fork of Ethereum mainnet. This is useful in that we take
# over the account of a major Uniswap liquidity provider and from there we can test many things that are infeasible
# to do with a Geth backend, simply becuase reproducting that state on our testnet would be far too complex to consider
# The tradeoff here is that hardhat is an ETH dev environment and not an actual ETH implementation, as such the outputs
# may be different. These two tests have different fork block heights they rely on
if [[ $TEST_TYPE == *"ARBITRARY_LOGIC"* ]]; then
    export ALCHEMY_ID=$ALCHEMY_ID
    pushd /gravity/solidity
    npm run solidity_test_fork &
    popd
elif [[ $TEST_TYPE == *"RELAY_MARKET"* ]]; then
    export ALCHEMY_ID=$ALCHEMY_ID
    pushd /gravity/solidity
    npm run evm_fork &
    popd
# This starts a hardhat test environment with no pre-seeded state, faster to run, not accurate
elif [[ ! -z "$HARDHAT" ]]; then
    pushd /gravity/solidity
    npm run evm &
    popd
# This starts the Geth backed testnet with no pre-seeded in state.
# Geth is what we run in CI and in general, but developers frequently
# perfer a faster experience provided by HardHat, also Mac's do not
# work correctly with the Geth backend, there is some issue where the Docker VM on Mac platforms can't get
# the right number of cpu cores and Geth goes crazy consuming all the processing power, on the other hand
# hardhat doesn't work for some tests that depend on transactions waiting for blocks, so Geth is the default
else
    # Init the genesis block. The genesis block was made by copying `tests/bor/testdata/genesis.json`
    # from the `bor` repo, editing "chainId" to 15, editing "londonBlock" and "jaipurBlock" to 0,
    # adding an allocation
    # `"0xBf660843528035a5A4921534E156a27e64B231fE": {
    #     "balance": "0x1337000000000000000000"
    # }`
    # To the end of the "alloc" block, and search+replace `71562b71999873DB5b286dF957af199Ec94617F7`
    # with `Bf660843528035a5A4921534E156a27e64B231fE` in a large block of hex so that our account
    # can be a block producer
    bor --identity "GravityTestnet" \
        --nodiscover --networkid 15 init /gravity/tests/assets/ETHGenesis.json

    # `--dev` uses its own genesis, `bor` otherwise requires a keystore with the private key for
    # 0xb1bab011e03a9862664706fc3bbaa1b16651528e5f0e7fbfcbfdd8be302a13e7
    # It was generated by
    # `from web3 import Account`
    # `import json`
    # `json.dumps(Account.encrypt('0xb1bab011e03a9862664706fc3bbaa1b16651528e5f0e7fbfcbfdd8be302a13e7', 'dev'))`
    # and pasting the json into dev_keystore/dev_key.json
    bor --identity "GravityTestnet" \
        --nodiscover \
        --networkid 15 \
        --bor.withoutheimdall \
        --http \
        --http.addr="0.0.0.0" \
        --http.vhosts="*" \
        --http.corsdomain="*" \
        --nousb \
        --verbosity=3 \
        --mine \
        --miner.etherbase=0xBf660843528035a5A4921534E156a27e64B231fE \
        --unlock=0xBf660843528035a5A4921534E156a27e64B231fE \
        --allow-insecure-unlock \
        --keystore="/gravity/tests/assets/dev_keystore" \
        --password="/gravity/tests/assets/dev_password.txt" \
        &> /bor.log &

    echo "waiting for bor to come online"
    until $(curl --output /dev/null --fail --silent --header "content-type: application/json" --data '{"method":"eth_blockNumber","params":[],"id":1,"jsonrpc":"2.0"}' http://localhost:8545); do
        sleep 1
    done
    echo "waiting for bor to sync"
    until [ "$(curl -s --header "content-type: application/json" --data '{"id":1,"jsonrpc":"2.0","method":"eth_syncing","params":[]}' http://localhost:8545)" == '{"jsonrpc":"2.0","id":1,"result":false}' ]; do
        sleep 1
    done
fi
